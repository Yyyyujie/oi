<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.zx.dao.CompanyTaskMapper">
  <resultMap id="BaseResultMap" type="cn.zx.pojo.CompanyTask">
    <id column="task_id" jdbcType="INTEGER" property="task_id" />
    <result column="company_id" jdbcType="INTEGER" property="company_id" />
    <result column="task_title" jdbcType="VARCHAR" property="task_title" />
    <result column="to_user" jdbcType="INTEGER" property="to_user" />
    <result column="user_id" jdbcType="INTEGER" property="user_id" />
    <result column="task_obj" jdbcType="INTEGER" property="task_obj" />
    <result column="task_create_time" jdbcType="TIMESTAMP" property="task_create_time" />
    <result column="task_accept_time" jdbcType="TIMESTAMP" property="task_accept_time" />
    <result column="task_start_time" jdbcType="TIMESTAMP" property="task_start_time" />
    <result column="task_end_time" jdbcType="TIMESTAMP" property="task_end_time" />
    <result column="task_complete_time" jdbcType="TIMESTAMP" property="task_complete_time" />
    <result column="task_progress" jdbcType="INTEGER" property="task_progress" />
    <result column="task_urgent" jdbcType="INTEGER" property="task_urgent" />
    <result column="task_important" jdbcType="INTEGER" property="task_important" />
    <result column="task_content" jdbcType="VARCHAR" property="task_content" />
    <result column="task_status" jdbcType="INTEGER" property="task_status" />
    <result column="task_del_reasion" jdbcType="VARCHAR" property="task_del_reasion" />
    <result column="task_reback_reasion" jdbcType="VARCHAR" property="task_reback_reasion" />
    <result column="is_remark" jdbcType="TINYINT" property="is_remark" />
    <result column="is_forward" jdbcType="TINYINT" property="is_forward" />
    <result column="is_delay" jdbcType="INTEGER" property="is_delay" />
    <result column="is_cui" jdbcType="INTEGER" property="is_cui" />
    <result column="task_quality" jdbcType="INTEGER" property="task_quality" />
    <result column="task_efficiency" jdbcType="INTEGER" property="task_efficiency" />
    <result column="task_communion_rec" jdbcType="INTEGER" property="task_communion_rec" />
    <result column="task_communion_pub" jdbcType="INTEGER" property="task_communion_pub" />
    <result column="task_study" jdbcType="INTEGER" property="task_study" />
    <result column="task_innovate" jdbcType="INTEGER" property="task_innovate" />
    <result column="task_leader" jdbcType="INTEGER" property="task_leader" />
    <result column="task_evaluate" jdbcType="VARCHAR" property="task_evaluate" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    task_id, company_id, task_title, to_user, user_id, task_obj, task_create_time, task_accept_time, 
    task_start_time, task_end_time, task_complete_time, task_progress, task_urgent, task_important, 
    task_content, task_status, task_del_reasion, task_reback_reasion, is_remark, is_forward, 
    is_delay, is_cui, task_quality, task_efficiency, task_communion_rec, task_communion_pub, 
    task_study, task_innovate, task_leader, task_evaluate
  </sql>
  <select id="selectByExample" parameterType="cn.zx.pojo.CompanyTaskExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from company_task
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from company_task
    where task_id = #{task_id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from company_task
    where task_id = #{task_id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.zx.pojo.CompanyTaskExample">
    delete from company_task
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.zx.pojo.CompanyTask">
    insert into company_task (task_id, company_id, task_title, 
      to_user, user_id, task_obj, 
      task_create_time, task_accept_time, 
      task_start_time, task_end_time, task_complete_time, 
      task_progress, task_urgent, task_important, 
      task_content, task_status, task_del_reasion, 
      task_reback_reasion, is_remark, is_forward, 
      is_delay, is_cui, task_quality, 
      task_efficiency, task_communion_rec, task_communion_pub, 
      task_study, task_innovate, task_leader, 
      task_evaluate)
    values (#{task_id,jdbcType=INTEGER}, #{company_id,jdbcType=INTEGER}, #{task_title,jdbcType=VARCHAR}, 
      #{to_user,jdbcType=INTEGER}, #{user_id,jdbcType=INTEGER}, #{task_obj,jdbcType=INTEGER}, 
      #{task_create_time,jdbcType=TIMESTAMP}, #{task_accept_time,jdbcType=TIMESTAMP}, 
      #{task_start_time,jdbcType=TIMESTAMP}, #{task_end_time,jdbcType=TIMESTAMP}, #{task_complete_time,jdbcType=TIMESTAMP}, 
      #{task_progress,jdbcType=INTEGER}, #{task_urgent,jdbcType=INTEGER}, #{task_important,jdbcType=INTEGER}, 
      #{task_content,jdbcType=VARCHAR}, #{task_status,jdbcType=INTEGER}, #{task_del_reasion,jdbcType=VARCHAR}, 
      #{task_reback_reasion,jdbcType=VARCHAR}, #{is_remark,jdbcType=TINYINT}, #{is_forward,jdbcType=TINYINT}, 
      #{is_delay,jdbcType=INTEGER}, #{is_cui,jdbcType=INTEGER}, #{task_quality,jdbcType=INTEGER}, 
      #{task_efficiency,jdbcType=INTEGER}, #{task_communion_rec,jdbcType=INTEGER}, #{task_communion_pub,jdbcType=INTEGER}, 
      #{task_study,jdbcType=INTEGER}, #{task_innovate,jdbcType=INTEGER}, #{task_leader,jdbcType=INTEGER}, 
      #{task_evaluate,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="cn.zx.pojo.CompanyTask"  useGeneratedKeys="true" keyProperty="task_id">
    insert into company_task
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="task_id != null">
        task_id,
      </if>
      <if test="company_id != null">
        company_id,
      </if>
      <if test="task_title != null">
        task_title,
      </if>
      <if test="to_user != null">
        to_user,
      </if>
      <if test="user_id != null">
        user_id,
      </if>
      <if test="task_obj != null">
        task_obj,
      </if>
      <if test="task_create_time != null">
        task_create_time,
      </if>
      <if test="task_accept_time != null">
        task_accept_time,
      </if>
      <if test="task_start_time != null">
        task_start_time,
      </if>
      <if test="task_end_time != null">
        task_end_time,
      </if>
      <if test="task_complete_time != null">
        task_complete_time,
      </if>
      <if test="task_progress != null">
        task_progress,
      </if>
      <if test="task_urgent != null">
        task_urgent,
      </if>
      <if test="task_important != null">
        task_important,
      </if>
      <if test="task_content != null">
        task_content,
      </if>
      <if test="task_status != null">
        task_status,
      </if>
      <if test="task_del_reasion != null">
        task_del_reasion,
      </if>
      <if test="task_reback_reasion != null">
        task_reback_reasion,
      </if>
      <if test="is_remark != null">
        is_remark,
      </if>
      <if test="is_forward != null">
        is_forward,
      </if>
      <if test="is_delay != null">
        is_delay,
      </if>
      <if test="is_cui != null">
        is_cui,
      </if>
      <if test="task_quality != null">
        task_quality,
      </if>
      <if test="task_efficiency != null">
        task_efficiency,
      </if>
      <if test="task_communion_rec != null">
        task_communion_rec,
      </if>
      <if test="task_communion_pub != null">
        task_communion_pub,
      </if>
      <if test="task_study != null">
        task_study,
      </if>
      <if test="task_innovate != null">
        task_innovate,
      </if>
      <if test="task_leader != null">
        task_leader,
      </if>
      <if test="task_evaluate != null">
        task_evaluate,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="task_id != null">
        #{task_id,jdbcType=INTEGER},
      </if>
      <if test="company_id != null">
        #{company_id,jdbcType=INTEGER},
      </if>
      <if test="task_title != null">
        #{task_title,jdbcType=VARCHAR},
      </if>
      <if test="to_user != null">
        #{to_user,jdbcType=INTEGER},
      </if>
      <if test="user_id != null">
        #{user_id,jdbcType=INTEGER},
      </if>
      <if test="task_obj != null">
        #{task_obj,jdbcType=INTEGER},
      </if>
      <if test="task_create_time != null">
        #{task_create_time,jdbcType=TIMESTAMP},
      </if>
      <if test="task_accept_time != null">
        #{task_accept_time,jdbcType=TIMESTAMP},
      </if>
      <if test="task_start_time != null">
        #{task_start_time,jdbcType=TIMESTAMP},
      </if>
      <if test="task_end_time != null">
        #{task_end_time,jdbcType=TIMESTAMP},
      </if>
      <if test="task_complete_time != null">
        #{task_complete_time,jdbcType=TIMESTAMP},
      </if>
      <if test="task_progress != null">
        #{task_progress,jdbcType=INTEGER},
      </if>
      <if test="task_urgent != null">
        #{task_urgent,jdbcType=INTEGER},
      </if>
      <if test="task_important != null">
        #{task_important,jdbcType=INTEGER},
      </if>
      <if test="task_content != null">
        #{task_content,jdbcType=VARCHAR},
      </if>
      <if test="task_status != null">
        #{task_status,jdbcType=INTEGER},
      </if>
      <if test="task_del_reasion != null">
        #{task_del_reasion,jdbcType=VARCHAR},
      </if>
      <if test="task_reback_reasion != null">
        #{task_reback_reasion,jdbcType=VARCHAR},
      </if>
      <if test="is_remark != null">
        #{is_remark,jdbcType=TINYINT},
      </if>
      <if test="is_forward != null">
        #{is_forward,jdbcType=TINYINT},
      </if>
      <if test="is_delay != null">
        #{is_delay,jdbcType=INTEGER},
      </if>
      <if test="is_cui != null">
        #{is_cui,jdbcType=INTEGER},
      </if>
      <if test="task_quality != null">
        #{task_quality,jdbcType=INTEGER},
      </if>
      <if test="task_efficiency != null">
        #{task_efficiency,jdbcType=INTEGER},
      </if>
      <if test="task_communion_rec != null">
        #{task_communion_rec,jdbcType=INTEGER},
      </if>
      <if test="task_communion_pub != null">
        #{task_communion_pub,jdbcType=INTEGER},
      </if>
      <if test="task_study != null">
        #{task_study,jdbcType=INTEGER},
      </if>
      <if test="task_innovate != null">
        #{task_innovate,jdbcType=INTEGER},
      </if>
      <if test="task_leader != null">
        #{task_leader,jdbcType=INTEGER},
      </if>
      <if test="task_evaluate != null">
        #{task_evaluate,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.zx.pojo.CompanyTaskExample" resultType="java.lang.Long">
    select count(*) from company_task
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update company_task
    <set>
      <if test="record.task_id != null">
        task_id = #{record.task_id,jdbcType=INTEGER},
      </if>
      <if test="record.company_id != null">
        company_id = #{record.company_id,jdbcType=INTEGER},
      </if>
      <if test="record.task_title != null">
        task_title = #{record.task_title,jdbcType=VARCHAR},
      </if>
      <if test="record.to_user != null">
        to_user = #{record.to_user,jdbcType=INTEGER},
      </if>
      <if test="record.user_id != null">
        user_id = #{record.user_id,jdbcType=INTEGER},
      </if>
      <if test="record.task_obj != null">
        task_obj = #{record.task_obj,jdbcType=INTEGER},
      </if>
      <if test="record.task_create_time != null">
        task_create_time = #{record.task_create_time,jdbcType=TIMESTAMP},
      </if>
      <if test="record.task_accept_time != null">
        task_accept_time = #{record.task_accept_time,jdbcType=TIMESTAMP},
      </if>
      <if test="record.task_start_time != null">
        task_start_time = #{record.task_start_time,jdbcType=TIMESTAMP},
      </if>
      <if test="record.task_end_time != null">
        task_end_time = #{record.task_end_time,jdbcType=TIMESTAMP},
      </if>
      <if test="record.task_complete_time != null">
        task_complete_time = #{record.task_complete_time,jdbcType=TIMESTAMP},
      </if>
      <if test="record.task_progress != null">
        task_progress = #{record.task_progress,jdbcType=INTEGER},
      </if>
      <if test="record.task_urgent != null">
        task_urgent = #{record.task_urgent,jdbcType=INTEGER},
      </if>
      <if test="record.task_important != null">
        task_important = #{record.task_important,jdbcType=INTEGER},
      </if>
      <if test="record.task_content != null">
        task_content = #{record.task_content,jdbcType=VARCHAR},
      </if>
      <if test="record.task_status != null">
        task_status = #{record.task_status,jdbcType=INTEGER},
      </if>
      <if test="record.task_del_reasion != null">
        task_del_reasion = #{record.task_del_reasion,jdbcType=VARCHAR},
      </if>
      <if test="record.task_reback_reasion != null">
        task_reback_reasion = #{record.task_reback_reasion,jdbcType=VARCHAR},
      </if>
      <if test="record.is_remark != null">
        is_remark = #{record.is_remark,jdbcType=TINYINT},
      </if>
      <if test="record.is_forward != null">
        is_forward = #{record.is_forward,jdbcType=TINYINT},
      </if>
      <if test="record.is_delay != null">
        is_delay = #{record.is_delay,jdbcType=INTEGER},
      </if>
      <if test="record.is_cui != null">
        is_cui = #{record.is_cui,jdbcType=INTEGER},
      </if>
      <if test="record.task_quality != null">
        task_quality = #{record.task_quality,jdbcType=INTEGER},
      </if>
      <if test="record.task_efficiency != null">
        task_efficiency = #{record.task_efficiency,jdbcType=INTEGER},
      </if>
      <if test="record.task_communion_rec != null">
        task_communion_rec = #{record.task_communion_rec,jdbcType=INTEGER},
      </if>
      <if test="record.task_communion_pub != null">
        task_communion_pub = #{record.task_communion_pub,jdbcType=INTEGER},
      </if>
      <if test="record.task_study != null">
        task_study = #{record.task_study,jdbcType=INTEGER},
      </if>
      <if test="record.task_innovate != null">
        task_innovate = #{record.task_innovate,jdbcType=INTEGER},
      </if>
      <if test="record.task_leader != null">
        task_leader = #{record.task_leader,jdbcType=INTEGER},
      </if>
      <if test="record.task_evaluate != null">
        task_evaluate = #{record.task_evaluate,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update company_task
    set task_id = #{record.task_id,jdbcType=INTEGER},
      company_id = #{record.company_id,jdbcType=INTEGER},
      task_title = #{record.task_title,jdbcType=VARCHAR},
      to_user = #{record.to_user,jdbcType=INTEGER},
      user_id = #{record.user_id,jdbcType=INTEGER},
      task_obj = #{record.task_obj,jdbcType=INTEGER},
      task_create_time = #{record.task_create_time,jdbcType=TIMESTAMP},
      task_accept_time = #{record.task_accept_time,jdbcType=TIMESTAMP},
      task_start_time = #{record.task_start_time,jdbcType=TIMESTAMP},
      task_end_time = #{record.task_end_time,jdbcType=TIMESTAMP},
      task_complete_time = #{record.task_complete_time,jdbcType=TIMESTAMP},
      task_progress = #{record.task_progress,jdbcType=INTEGER},
      task_urgent = #{record.task_urgent,jdbcType=INTEGER},
      task_important = #{record.task_important,jdbcType=INTEGER},
      task_content = #{record.task_content,jdbcType=VARCHAR},
      task_status = #{record.task_status,jdbcType=INTEGER},
      task_del_reasion = #{record.task_del_reasion,jdbcType=VARCHAR},
      task_reback_reasion = #{record.task_reback_reasion,jdbcType=VARCHAR},
      is_remark = #{record.is_remark,jdbcType=TINYINT},
      is_forward = #{record.is_forward,jdbcType=TINYINT},
      is_delay = #{record.is_delay,jdbcType=INTEGER},
      is_cui = #{record.is_cui,jdbcType=INTEGER},
      task_quality = #{record.task_quality,jdbcType=INTEGER},
      task_efficiency = #{record.task_efficiency,jdbcType=INTEGER},
      task_communion_rec = #{record.task_communion_rec,jdbcType=INTEGER},
      task_communion_pub = #{record.task_communion_pub,jdbcType=INTEGER},
      task_study = #{record.task_study,jdbcType=INTEGER},
      task_innovate = #{record.task_innovate,jdbcType=INTEGER},
      task_leader = #{record.task_leader,jdbcType=INTEGER},
      task_evaluate = #{record.task_evaluate,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.zx.pojo.CompanyTask">
    update company_task
    <set>
      <if test="company_id != null">
        company_id = #{company_id,jdbcType=INTEGER},
      </if>
      <if test="task_title != null">
        task_title = #{task_title,jdbcType=VARCHAR},
      </if>
      <if test="to_user != null">
        to_user = #{to_user,jdbcType=INTEGER},
      </if>
      <if test="user_id != null">
        user_id = #{user_id,jdbcType=INTEGER},
      </if>
      <if test="task_obj != null">
        task_obj = #{task_obj,jdbcType=INTEGER},
      </if>
      <if test="task_create_time != null">
        task_create_time = #{task_create_time,jdbcType=TIMESTAMP},
      </if>
      <if test="task_accept_time != null">
        task_accept_time = #{task_accept_time,jdbcType=TIMESTAMP},
      </if>
      <if test="task_start_time != null">
        task_start_time = #{task_start_time,jdbcType=TIMESTAMP},
      </if>
      <if test="task_end_time != null">
        task_end_time = #{task_end_time,jdbcType=TIMESTAMP},
      </if>
      <if test="task_complete_time != null">
        task_complete_time = #{task_complete_time,jdbcType=TIMESTAMP},
      </if>
      <if test="task_progress != null">
        task_progress = #{task_progress,jdbcType=INTEGER},
      </if>
      <if test="task_urgent != null">
        task_urgent = #{task_urgent,jdbcType=INTEGER},
      </if>
      <if test="task_important != null">
        task_important = #{task_important,jdbcType=INTEGER},
      </if>
      <if test="task_content != null">
        task_content = #{task_content,jdbcType=VARCHAR},
      </if>
      <if test="task_status != null">
        task_status = #{task_status,jdbcType=INTEGER},
      </if>
      <if test="task_del_reasion != null">
        task_del_reasion = #{task_del_reasion,jdbcType=VARCHAR},
      </if>
      <if test="task_reback_reasion != null">
        task_reback_reasion = #{task_reback_reasion,jdbcType=VARCHAR},
      </if>
      <if test="is_remark != null">
        is_remark = #{is_remark,jdbcType=TINYINT},
      </if>
      <if test="is_forward != null">
        is_forward = #{is_forward,jdbcType=TINYINT},
      </if>
      <if test="is_delay != null">
        is_delay = #{is_delay,jdbcType=INTEGER},
      </if>
      <if test="is_cui != null">
        is_cui = #{is_cui,jdbcType=INTEGER},
      </if>
      <if test="task_quality != null">
        task_quality = #{task_quality,jdbcType=INTEGER},
      </if>
      <if test="task_efficiency != null">
        task_efficiency = #{task_efficiency,jdbcType=INTEGER},
      </if>
      <if test="task_communion_rec != null">
        task_communion_rec = #{task_communion_rec,jdbcType=INTEGER},
      </if>
      <if test="task_communion_pub != null">
        task_communion_pub = #{task_communion_pub,jdbcType=INTEGER},
      </if>
      <if test="task_study != null">
        task_study = #{task_study,jdbcType=INTEGER},
      </if>
      <if test="task_innovate != null">
        task_innovate = #{task_innovate,jdbcType=INTEGER},
      </if>
      <if test="task_leader != null">
        task_leader = #{task_leader,jdbcType=INTEGER},
      </if>
      <if test="task_evaluate != null">
        task_evaluate = #{task_evaluate,jdbcType=VARCHAR},
      </if>
    </set>
    where task_id = #{task_id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.zx.pojo.CompanyTask">
    update company_task
    set company_id = #{company_id,jdbcType=INTEGER},
      task_title = #{task_title,jdbcType=VARCHAR},
      to_user = #{to_user,jdbcType=INTEGER},
      user_id = #{user_id,jdbcType=INTEGER},
      task_obj = #{task_obj,jdbcType=INTEGER},
      task_create_time = #{task_create_time,jdbcType=TIMESTAMP},
      task_accept_time = #{task_accept_time,jdbcType=TIMESTAMP},
      task_start_time = #{task_start_time,jdbcType=TIMESTAMP},
      task_end_time = #{task_end_time,jdbcType=TIMESTAMP},
      task_complete_time = #{task_complete_time,jdbcType=TIMESTAMP},
      task_progress = #{task_progress,jdbcType=INTEGER},
      task_urgent = #{task_urgent,jdbcType=INTEGER},
      task_important = #{task_important,jdbcType=INTEGER},
      task_content = #{task_content,jdbcType=VARCHAR},
      task_status = #{task_status,jdbcType=INTEGER},
      task_del_reasion = #{task_del_reasion,jdbcType=VARCHAR},
      task_reback_reasion = #{task_reback_reasion,jdbcType=VARCHAR},
      is_remark = #{is_remark,jdbcType=TINYINT},
      is_forward = #{is_forward,jdbcType=TINYINT},
      is_delay = #{is_delay,jdbcType=INTEGER},
      is_cui = #{is_cui,jdbcType=INTEGER},
      task_quality = #{task_quality,jdbcType=INTEGER},
      task_efficiency = #{task_efficiency,jdbcType=INTEGER},
      task_communion_rec = #{task_communion_rec,jdbcType=INTEGER},
      task_communion_pub = #{task_communion_pub,jdbcType=INTEGER},
      task_study = #{task_study,jdbcType=INTEGER},
      task_innovate = #{task_innovate,jdbcType=INTEGER},
      task_leader = #{task_leader,jdbcType=INTEGER},
      task_evaluate = #{task_evaluate,jdbcType=VARCHAR}
    where task_id = #{task_id,jdbcType=INTEGER}
  </update>
  	<select id="selectTop10" resultType="cn.zx.pojo.CompanyTask">
		SELECT
		task_id,to_user,company_staffer.company_id,task_status,company_staffer.realname,COUNT(1)
		AS ranking FROM company_task
		INNER JOIN company_staffer ON
		company_staffer.user_id= company_task.to_user
		WHERE task_status=2 AND
		company_staffer.company_id=1
		GROUP BY to_user
	</select>
	<select id="selectTaskByUserId" resultType="cn.zx.pojo.CompanyTask">
		SELECT
		

task_id,company_task.company_id,task_title,to_user,company_task.user_id,task_obj,task_start_time,task_end_time,t

ask_complete_time,task_progress,task_urgent,task_important,task_content,task_status,task_del_reasion,task_reback

_reasion,is_remark,is_forward,is_delay,is_cui,task_quality,task_efficiency,task_evaluate,company_staffer.realnam

e
		FROM company_task
		INNER JOIN company_staffer ON company_staffer.user_id
		= company_task.user_id
		WHERE company_task.company_id = #{company_id}
		AND company_task.to_user=#{to_user}
		ORDER BY task_start_time DESC
	</select>
	<select id="selectTaskByToUser" resultType="cn.zx.pojo.CompanyTask">
		SELECT
		

task_id,company_task.company_id,task_title,to_user,company_task.user_id,task_obj,task_start_time,task_end_time,t

ask_complete_time,task_progress,task_urgent,task_important,task_content,task_status,task_del_reasion,task_reback

_reasion,is_remark,is_forward,is_delay,is_cui,task_quality,task_efficiency,task_evaluate,company_staffer.realnam

e
		FROM company_task
		INNER JOIN company_staffer ON company_staffer.user_id
		= company_task.to_user
		WHERE company_task.company_id = #{company_id}
		AND company_task.user_id=#{user_id}
		ORDER BY task_start_time DESC
	</select>

	<select id="selectToDOTaskByUserId" resultType="cn.zx.pojo.CompanyTask">
		SELECT
		

task_id,company_task.company_id,task_title,to_user,company_task.user_id,task_obj,task_start_time,task_end_time,t

ask_complete_time,task_progress,task_urgent,task_important,task_content,task_status,task_del_reasion,task_reback

_reasion,is_remark,is_forward,is_delay,is_cui,task_quality,task_efficiency,task_evaluate,company_staffer.realnam

e
		FROM company_task
		INNER JOIN company_staffer ON company_staffer.user_id
		= company_task.user_id
		WHERE company_task.company_id=#{company_id} AND
		company_task.to_user=#{user_id} AND task_status BETWEEN 4 AND 5
		ORDER
		BY task_start_time DESC
	</select>

	<select id="selectToDOTaskByToUser" resultType="cn.zx.pojo.CompanyTask">
		SELECT
		

task_id,company_task.company_id,task_title,to_user,company_task.user_id,task_obj,task_start_time,task_end_time,t

ask_complete_time,task_progress,task_urgent,task_important,task_content,task_status,task_del_reasion,task_reback

_reasion,is_remark,is_forward,is_delay,is_cui,task_quality,task_efficiency,task_evaluate,company_staffer.realnam

e
		FROM company_task
		INNER JOIN company_staffer ON company_staffer.user_id
		= company_task.to_user
		WHERE company_task.company_id=#{company_id} AND
		company_task.user_id=#{user_id} AND task_status BETWEEN 3 AND 6
		ORDER
		BY task_start_time DESC
	</select>

	<select id="selectTaskByStatusAndUserId" resultType="cn.zx.pojo.CompanyTask">
		SELECT
		

task_id,company_task.company_id,task_title,to_user,company_task.user_id,task_obj,task_start_time,task_end_time,t

ask_complete_time,task_progress,task_urgent,task_important,task_content,task_status,task_del_reasion,task_reback

_reasion,is_remark,is_forward,is_delay,is_cui,task_quality,task_efficiency,task_evaluate,company_staffer.realnam

e
		FROM company_task
		INNER JOIN company_staffer ON company_staffer.user_id
		= company_task.to_user
		WHERE company_task.company_id = #{company_id}
		AND company_task.user_id=#{user_id} AND task_status=#{task_status}
		ORDER BY task_start_time DESC
	</select>

	<select id="selectTaskByStatusAndToUserId" resultType="cn.zx.pojo.CompanyTask">
		SELECT
		

task_id,company_task.company_id,task_title,to_user,company_task.user_id,task_obj,task_start_time,task_end_time,t

ask_complete_time,task_progress,task_urgent,task_important,task_content,task_status,task_del_reasion,task_reback

_reasion,is_remark,is_forward,is_delay,is_cui,task_quality,task_efficiency,task_evaluate,company_staffer.realnam

e
		FROM company_task
		INNER JOIN company_staffer ON company_staffer.user_id
		= company_task.user_id
		WHERE company_task.company_id = #{company_id}
		AND company_task.to_user=#{to_user} AND task_status=#{task_status}
		ORDER BY task_start_time DESC
	</select>


	<!-- 企业 -->
	<select id="selectTask" resultType="CompanyTask">
		select task_id,t.company_id as company_id ,task_title,to_user,
		s1.realname as toName,t.user_id as user_id,
		s2.realname as
		userName,task_obj,
		task_start_time,task_end_time,task_complete_time,
		task_progress,task_content,task_status,task_important,task_urgent,
		task_quality,task_efficiency,task_evaluate
		from company_task as t
		inner
		join company_staffer as s1
		on s1.user_id=to_user
		inner join
		company_staffer as s2
		on s2.user_id=t.user_id
		<where>
			task_status !=1
			<if test="company_id !=null">
				and t.company_id=#{company_id}
			</if>
		</where>
		order by task_start_time desc
	</select>
	<!-- 按月查询总数 -->
	<select id="selectCountMonth" resultType="CompanyTask">
		select month(task_start_time) as month,count(task_id) as count from
		company_task
		<where>
			<if test="company_id !=null">
				and company_id =#{company_id}
			</if>
		</where>
		group by company_id,DATE_FORMAT(task_start_time,'%y%m')
	</select>
	<!-- 完成按月查询 -->
	<select id="selectAccomplishMonth" resultType="CompanyTask">
		select month(task_start_time) as month,count(task_id) as count from
		company_task
		<where>
			task_status=2
			<if test="company_id !=null">
				and company_id =#{company_id}
			</if>
		</where>
		group by company_id,DATE_FORMAT(task_start_time,'%y%m')
	</select>
	<!-- 进行按月查询 -->
	<select id="selectCarryMonth" resultType="CompanyTask">
		select month(task_start_time) as month,count(task_id) as count from
		company_task
		<where>
			task_status=4
			<if test="company_id !=null">
				and company_id =#{company_id}
			</if>
		</where>
		group by company_id,DATE_FORMAT(task_start_time,'%y%m')
	</select>
	<!-- 员工TOP10 -->
	<select id="selectTop" resultType="CompanyTask">
		select realname,count(task_id) as count from company_task as t
		inner
		join company_staffer as s
		on s.user_id=t.to_user
		<where>
			task_status=2
			<if test="company_id !=null">
				and t.company_id =#{company_id}
			</if>
		</where>
		group by to_user
		order by count(task_id) desc
		limit 10
	</select>
	<!-- 查询所占百分比开始 -->

	<!-- 全部任务 -->
	<select id="selectCount" resultType="CompanyTask">
		select count(task_id) as count from company_task
		<where>
			<if test="company_id !=null">
				and company_id =#{company_id}
			</if>
		</where>
		GROUP BY company_id
	</select>
	<!-- 已取消任务 -->
	<select id="selectRemove" resultType="CompanyTask">
		select count(task_id) as count from company_task
		<where>
			task_status=1
			<if test="company_id !=null">
				and company_id =#{company_id}
			</if>
		</where>
		GROUP BY company_id
	</select>
	<!-- 已完成任务 -->
	<select id="selectAccomplish" resultType="CompanyTask">
		select count(task_id) as count from company_task
		<where>
			task_status=2
			<if test="company_id !=null">
				and company_id =#{company_id}
			</if>
		</where>
		GROUP BY company_id
	</select>
	<!-- 已退回任务 -->
	<select id="selectBack" resultType="CompanyTask">
		select count(task_id) as count from company_task
		<where>
			task_status=3
			<if test="company_id !=null">
				and company_id =#{company_id}
			</if>
		</where>
		GROUP BY company_id
	</select>
	<!-- 进行中任务 -->
	<select id="selectCarry" resultType="CompanyTask">
		select count(task_id) as count from company_task
		<where>
			task_status=4
			<if test="company_id !=null">
				and company_id =#{company_id}
			</if>
		</where>
		GROUP BY company_id
	</select>
	<!-- 带接收任务 -->
	<select id="selectReceive" resultType="CompanyTask">
		select count(task_id) as count from company_task
		<where>
			task_status=5
			<if test="company_id !=null">
				and company_id =#{company_id}
			</if>
		</where>
		GROUP BY company_id
	</select>
	<!-- 带评价任务 -->
	<select id="selectEvaluate" resultType="CompanyTask">
		select count(task_id) as count from company_task
		<where>
			task_status=6
			<if test="company_id !=null">
				and company_id =#{company_id}
			</if>
		</where>
		GROUP BY company_id
	</select>
	<!-- 所占百分比结束 -->

	<!-- 查询个人数据开始 -->
	<!-- 个人完成 -->
	<select id="selectStafferComplete" resultType="CompanyTask">
		select count(task_id) as count from company_task
		<where>
			task_status=2
			<if test="to_user !=null">
				and to_user =#{to_user}
			</if>
			<if test="user_id !=null">
				and user_id =#{user_id}
			</if>
		</where>
	</select>
	<!-- 个人接受 -->
	<select id="selectStafferReceive" resultType="CompanyTask">
		select count(task_id) as count from company_task
		<where>
			task_status !=5
			<if test="to_user !=null">
				and to_user =#{to_user}
			</if>
			<if test="user_id !=null">
				and user_id =#{user_id}
			</if>
		</where>
	</select>
	<!-- 个人进行 -->
	<select id="selectStafferCarry" resultType="CompanyTask">
		select count(task_id) as count from company_task
		<where>
			task_status=4
			<if test="to_user !=null">
				and to_user =#{to_user}
			</if>
			<if test="user_id !=null">
				and user_id =#{user_id}
			</if>
		</where>
	</select>
	<!-- 个人总数 -->
	<select id="selectStafferCount" resultType="CompanyTask">
		select count(task_id) as count from company_task
		<where>
			<if test="to_user !=null">
				and to_user =#{to_user}
			</if>
			<if test="user_id !=null">
				and user_id =#{user_id}
			</if>
		</where>
	</select>

	<!-- 查询个人数据结束 -->
	<!-- /*个人月数据开始*/ -->
	<!-- 进行 -->
	<select id="selectStafferCarryDay" resultType="CompanyTask">
		select DATE_FORMAT(task_start_time,'%m') month,
		count(task_id) as count
		from company_task
		<where>
			task_status=4
			<if test="to_user !=null">
				and to_user =#{to_user}
			</if>
			<if test="user_id !=null">
				or user_id =#{user_id}
			</if>
		</where>
		GROUP by DATE_FORMAT(task_start_time,'%y%m')
	</select>
	<!-- 完成 -->
	<select id="selectStafferCompleteDay" resultType="CompanyTask">
		select DATE_FORMAT(task_start_time,'%m') month,
		count(task_id) as count
		from company_task
		<where>
			task_status=2
			<if test="to_user !=null">
				and to_user =#{to_user}
			</if>
			<if test="user_id !=null">
				or user_id =#{user_id}
			</if>
		</where>
		GROUP by DATE_FORMAT(task_start_time,'%y%m')
	</select>
	<!-- 总数 -->
	<select id="selectStafferCountDay" resultType="CompanyTask">
		select DATE_FORMAT(task_start_time,'%m') month,
		count(task_id) as count
		from company_task
		<where>
			<if test="to_user !=null">
				and to_user =#{to_user}
			</if>
			<if test="user_id !=null">
				or user_id =#{user_id}
			</if>
		</where>
		GROUP by DATE_FORMAT(task_start_time,'%y%m')
	</select>
	<!-- /*个人月数据结束*/ -->

	<select id="selectByExampleWithOther" parameterType="java.util.Map"
		resultMap="BaseResultMap">
		SELECT
		task_id,t.company_id, task_title, to_user,user_id,
		task_obj,ty.task_type,
		task_start_time,task_create_time,
		task_end_time,
		task_complete_time, task_progress, task_urgent, task_important,
		task_content,
		task_status, task_del_reasion, task_reback_reasion,
		is_remark, is_forward,
		is_delay, is_cui,
		task_quality, task_efficiency,
		task_evaluate
		FROM
		company_task AS t
		LEFT JOIN company_task_type AS ty ON
		ty.task_type_id=t.task_obj
		WHERE
		(user_id=#{user_id} OR
		to_user=#{user_id})
		<if test="search != null and search !='' ">
			and task_title LIKE CONCAT(CONCAT('%', #{search}), '%')
		</if>
		<if test="order == null ">
		ORDER BY 
		CASE 
		WHEN task_status=5 THEN 100
		WHEN task_status=4 THEN 200
		WHEN task_status=3 THEN 300
		WHEN task_status=6 THEN 400
		WHEN task_status=2 THEN 500
		ELSE 600
		END
		</if>
		<if test="order != null and order !='' ">
			ORDER BY ${column} ${order}
		</if>
		LIMIT #{limit} offset #{offset}
	</select>

	<!-- 查询跟投票人有关的 -->
	<select id="selectByObjID" resultType="CompanyTask">
		SELECT
		task_id,company_id, task_title, to_user,user_id, task_obj,
		task_start_time,
		task_end_time, task_complete_time, task_progress,
		task_urgent,
		task_important, task_content,
		task_status,
		task_del_reasion, task_reback_reasion, is_remark, is_forward,
		is_delay, is_cui,
		task_quality, task_efficiency, task_evaluate
		FROM
		company_task
		<where>
			task_status=2
			<if test="to_user !=null">
				and to_user =#{to_user}
			</if>
		</where>
	</select>
	<select id="radar" parameterType="java.lang.Integer" resultType="java.util.Map">
	SELECT 
	 IF(AVG(task_quality) IS NULL,0,AVG(task_quality)) AS task_quality, 
  IF(AVG(task_efficiency) IS NULL,0,AVG(task_efficiency)) AS task_efficiency, 
   IF(AVG(task_study) IS NULL,0,AVG(task_study)) AS task_study, 
    IF(AVG(task_innovate) IS NULL,0,AVG(task_innovate)) AS task_innovate
	FROM company_task 
	WHERE to_user=#{user_id}
	AND	task_status=2;
	</select>
	<select id="innovate" parameterType="java.lang.Integer" resultType="java.lang.String">
	SELECT 
	   IF(AVG(task_leader) IS NULL,0,AVG(task_leader))
		FROM company_task 
		WHERE
		user_id=#{user_id}
		AND task_status=2;
	</select>
	<select id="task_communion_rec" parameterType="java.lang.Integer" resultType="java.lang.String">
	SELECT 
        IF(AVG(task_communion_rec) IS NULL,0,AVG(task_communion_rec))
		FROM company_task 
		WHERE to_user=#{user_id}
		AND task_status=2;
	</select>
	<select id="task_communion_pub" parameterType="java.lang.Integer" resultType="java.lang.String">
	SELECT 
		 IF(AVG(task_communion_pub) IS NULL,0,AVG(task_communion_pub))
		FROM company_task 
		WHERE user_id=#{user_id}
		AND task_status=2;
	</select>
	<select id="selectTaskCount" parameterType="java.util.Map" resultType="java.lang.Long">
		SELECT count(1)
		FROM
		company_task AS t
		LEFT JOIN company_task_type AS ty ON
		ty.task_type_id=t.task_obj
		WHERE
		(user_id=#{user_id} OR
		to_user=#{user_id})
		<if test="search != null and search !='' ">
			and task_title LIKE CONCAT(CONCAT('%', #{search}), '%')
		</if>
	</select>
	<!-- 企业端数据下钻开始 -->
	<select id="selectGoingTask" resultType="CompanyTask">
		SELECT task_id,COUNT(task_id) AS count,to_user,s1.realname as toName,
		dept_id as ranking,task_status,dept_name as name
		 FROM company_task AS t
		 RIGHT JOIN company_staffer AS s1
		 ON s1.user_id=to_user
		LEFT JOIN company_depart AS d
		ON d.dept_id=s1.depart
		<where>
			<if test="task_status !=null">
				<if test="task_status !=2">
					and task_status !=#{task_status}
				</if>
				<if test="task_status ==2">
					and task_status=#{task_status}
				</if>
			</if>
			<if test="depart !=null">
				AND s1.depart=#{depart}
			</if>
			<if test="to_user !=null">
				AND to_user=#{to_user}
			</if>
			<if test="company_id !=null">
				AND t.company_id =#{company_id}
			</if>
		</where>
	</select>	
	<!-- 企业端数据下钻结束 -->
</mapper>